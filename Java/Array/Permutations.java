class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        // Approch is that we will solve the question in recursive way
        // let's understand
        // given array => [1,2,3] then all the permuation will be generated by 
        // interchanging the places i.e [_, _, _] at index 0 there are three choices
        // either we can put 1,2 or 3. now let say  we have placed 1 any element
        // we mow left with two choices i.e 2 or 3 similarly for the next place we
        // will have one choice. 
        // Hence total number of permutation will be 3*2*1 => 6 i.e 3!
        
        // Now Step 1: swap any element at index 0
        // Then Step 2: call recursive function then undo swapping then
        // all the remaining work recursion will handle
        // For more refer youtube videos
        int index = 0;
        List<List<Integer>> ans = new ArrayList<>();
        
        permutation(nums, ans, index);
        
        return ans;
        
    }
    
    public void permutation(int[] nums, List<List<Integer>> ans, int index){
        
        // Base case 
        if(index >= nums.length){
            // toList() is custom fuction to convert int[] to list
            ans.add(toList(nums));
            return;
        }
        
        // swapping element at index
        for(int i = index; i < nums.length; i++){
            
            // swapping element at index
            swap(nums, i, index );
            
            // Recursive call
            permutation(nums, ans , index + 1);
            
            // Undo swapping
            swap(nums, i, index);
        }
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    // fuction to convert int[] to list
    public List<Integer> toList(int[] nums){
        
        List<Integer> res = new ArrayList<>();
        
        for(int i: nums)
            res.add(i);
        
        return res;
    }
}
